load("C:/Main/Machine_Learning_Hobby/Home_Edition/Student_Grades/data/dataMain.RData")
load("C:/Main/Machine_Learning_Hobby/Home_Edition/Student_Grades/Cleaning/gradeData.RData")
rm(dataMain)
rm(gradeData)
ssh -T git@github.com
library(knitr)
library(rmarkdown)
?recommenderlab
library(recommenderlab)
install.packages("recommenderlab")
require(swirl)
swirl()
?InstallCourses
install_course("Getting_and_Cleaning_Data")
install_course("Exploratory_Data_Analysis")
swirl()
info()
play()
?select
?filter
nxt()
library(dplyr)
play()
?filter
nxt()
?tbl_df
tbl_df('data frame tbl')
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
summary(cran)
by_package <- arrange(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
?n
submit()\
submit()
submit()
submit()
submit()
reset()
swirl()
reset()
swirl()
submit()
tbl(pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count,order = "descending")
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View(top_unique_sorted)
submit()
sumbit()
submit()
submit()
View(result3)
submit()
?select
submit()
submit()
submit()
submit()
swirl()
require(swirl)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
mydf
cran
select(cran, -time)
-5:20
-5:-20
-(5:20)
select(cran, -(X:size))
filter(cran,package == "swirl")
filter(cran, r_version == "3.1.1", | country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?comparison
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", , country == "US", country == "IN")
filter(cran, r_version <= "3.0.2", , country == "US" | country == "IN")
filter(cran, r_version <= "3.0.2",  country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, asce(country), desc(r_version),asce(ip_id))
arrange(cran2, country, desc(r_version),ip_id)
cran3<- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = (size_mb = size/ 2^20) / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size *1000)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size)
)
require(swirl)
swirl()
mpg
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
gplot(displ, hwy, mpg)
ggplot(displ, hwy, mpg)
qplot(mpg,displ, hwy)
qplot(displ, hwy, mpg)
?qplot
qplot(displ, hwy, data =mpg)
qplot(displ, hwy, data =mpg, aesthetic = drv)
qplot(displ, hwy, data =mpg, color = drv)
qplot(displ, hwy, data =mpg, color = drv, geom = c("point","smooth"))
qplot(hwy, mpg,drv)
qplot(hwy, mpg,data = drv)
qplot(hwy, data =mpg, drv)
qplot(y=hwy, data =mpg, color = drv)
str(myhigh)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
e
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
library(gapminder)
library(plyr)
library(dplyr)
library(manipulate)
library(ggplot2)
library(gapminder)
library(plyr)
library(dplyr)
library(manipulate)
library(ggplot2)
options(scipen=999) # Remove Annoying Scientific notation
gapminder <-gapminder
#gapminder <- read.csv("gapminder.tsv",sep="\t") #read in the gapminder dataset
attach(gapminder)
yearslist <- unique(gapminder$year) #create list of all years covered
continentlist <- c("Africa" ,"Americas" ,"Asia", "Europe", "Oceania") #create list of all continents for the automation to work
applet <- manipulate( #Start with the ggplot itself and replace every changable parameter with an alias
# Use aes_string instead of aes because we want to be able to programmatically feed variables into the ggplot code
ggplot(data=gapminder[year==Year & continent %in% Continent,], aes_string(x=Variable_1,y=Variable_2, color=ifelse(ccoding==TRUE,"factor(continent)","FALSE")))+
geom_point()+
ggtitle(expression(atop("Gapminder Explorer", atop(italic("Click the Settings Button on the Top-Left to Pick Variables"), ""))))+
theme(plot.title = element_text(size=20 ,face="bold", margin =margin(10,0,10,0)))+
theme(axis.title.x = element_text(color="forestgreen", vjust=-0.35),axis.title.y = element_text(color="cadetblue" , vjust=0.35))+
theme(panel.background = element_rect(fill = '#e3e1d8'))+
theme(legend.title=element_blank())+
theme(legend.key=element_rect(fill='#aaaab0'))+
#theme(plot.background = element_rect(fill = '#f0f5f2'))+ #exclude this line if using the "scale_color_brewer"
guides(colour = guide_legend(override.aes = list(size=5)))+
scale_color_brewer(palette="Set1")+
{if(logxswitch)scale_x_continuous(trans = "log")}+
{if(logyswitch)scale_y_continuous(trans = "log")}+
{if(reglineswitch)geom_smooth(method = "lm")}+
theme(axis.text.x=element_text(angle=50, size=12, vjust=0.5)), #vjust creates distance between the axis labels and the graph itself
#Now we add the controls so that the user can manipulate the gapminder set
#for Changable parameter we put in the ggplot, we put a corresponding control below
Year = picker(All=yearslist,1952,1962,1972,1982,1992,2002,2007),  # Drop-down list for choosing the year
Variable_1 = picker( GdpPerCapita = "gdpPercap",LifeExpectancy = "lifeExp" ,Population ="pop"),  #Drop-down list for choosing 1st variable
Variable_2 = picker( LifeExpectancy = "lifeExp",GdpPerCapita = "gdpPercap",Population = "pop"), #Drop-down list for choosing 1st variable
ccoding=checkbox(TRUE, "Color Code By Continent"), #Choose whether to color code by continent
Continent = picker( ALL= continentlist, "Africa", "Americas", "Asia", "Europe", "Oceania"),#Drop-down list for continent
logxswitch = checkbox(FALSE , "Log the X variable"),
logyswitch = checkbox(FALSE , "Log the Y variable"),
reglineswitch = checkbox(FALSE , "Plot Line of Best Fit For Each Active Group")
)
rm(list = ls())
setwd("C:/Main/AQM/newRepo")
bc.dat <- read.csv(file="BreastCancer.csv", header=TRUE, sep=",")
bc.dat <-  bc.dat[!is.na(bc.dat),]
str(bc.dat)
bc.dat <- read.csv(file="BreastCancer.csv", header=TRUE, sep=",")
bc.dat <- read.csv(file="bcancer/BreastCancer.csv", header=TRUE, sep=",")
bc.dat <-  bc.dat[!is.na(bc.dat),]
str(bc.dat)
ncol(bc.dat)
summary(mylogit)
bc.dat <- read.csv(file="bcancer/BreastCancer.csv", header=TRUE, sep=",")
bc.dat <-  bc.dat[!is.na(bc.dat),]
mylogit<- glm(as.factor(Class)~. , data = bc.dat, family = "binomial")
summary(mylogit)
bob <- 4
bob <- c(bob,3)
bob
ssquares <- function(x)
{
n <- nrow(bc.dat)
sum((bc.dat[,11] - cbind(1, bc.dat[,1:10]) %*% x)^2) / n
}
ssquares(1:10)
1:10
ssquares(1:11)
cbind(1, bc.dat[,1:10])
head(cbind(1, bc.dat[,1:10]))
head(bc.dat)
table(bc.dat$Id)
plot(table(bc.dat$Id))
bc.dat <- read.csv(file="bcancer/BreastCancer.csv", header=TRUE, sep=",")
bc.dat <-  bc.dat[!is.na(bc.dat),]
bc.dat <- bc.dat[,c(2:11)]
mylogit<- glm(as.factor(Class)~. , data = bc.dat, family = "binomial")
summary(mylogit)
# place probabilities to the closest binary response
predValue <- predict(mylogit, type = "response")
predValue[predValue > 0.5] <- 1
predValue[predValue <= 0.5] <- 0
predValue <- as.data.frame(predValue)
probDiff <- sum(abs(predValue - bc.dat$Class))/(length(bc.dat$Id))
# using logistic regression, find out what percept is correct
1-probDiff
predValue <- predict(mylogit, type = "response")
predValue[predValue > 0.5] <- 1
predValue[predValue <= 0.5] <- 0
predValue <- as.data.frame(predValue)
probDiff <- sum(abs(predValue - bc.dat$Class))/(length(bc.dat$Id))
# using logistic regression, find out what percept is correct
1-probDiff
mylogit<- glm(as.factor(Class)~. , data = bc.dat, family = "binomial")
summary(mylogit)
# place probabilities to the closest binary response
predValue <- predict(mylogit, type = "response")
predValue[predValue > 0.5] <- 1
predValue[predValue <= 0.5] <- 0
predValue <- as.data.frame(predValue)
probDiff <- sum(abs(predValue - bc.dat$Class))/(nrow(bc.dat))
# using logistic regression, find out what percept is correct
1-probDiff
ssquares(1:10)
ssquares(c(1:10)
)
ssquares <- function(x)
{
n <- nrow(bc.dat)
sum((bc.dat[,10] - cbind(1, bc.dat[,1:9]) %*% x)^2) / n
}
ssquares(c(1:10))
# sum of squares
ssquares <- function(x)
{
n <- nrow(bc.dat)
sum((bc.dat[,10] - cbind(1, bc.dat[,1:9]) %*% x)^2) / n
}
head(cbind(1, bc.dat[,1:9]))
cbind(1, bc.dat[,1:9]) %*% c(1:10)
c(1:10)
c(1,2)
c(1:2)
ncol(cbind(1, bc.dat[,1:9]))
ncol(cbind(1, bc.dat[,1:9]))
cbind(1, bc.dat[,1:9])%*% c(1,2,3,4,5,6,7,8,9,10)
bob<-cbind(1, bc.dat[,1:9])
bob
bc.dat <- read.csv(file="bcancer/BreastCancer.csv", header=TRUE, sep=",")
#get rid of unknowns
bc.dat <-  bc.dat[!is.na(bc.dat),]
#don't need ID column
bc.dat <- bc.dat[,c(2:11)]
bc.dat
View(bc.dat)
bc.dat <- read.csv(file="bcancer/BreastCancer.csv", header=TRUE, sep=",")
bc.dat <-  bc.dat[!is.na(bc.dat),]
bc.dat <- read.csv(file="bcancer/BreastCancer.csv", header=TRUE, sep=",")
bc.dat <-  bc.dat[complete.cases(bc.dat),]
bc.dat <- bc.dat[,c(2:11)]
attach(bc.dat)
head(bc.dat)
# sum of squares
ssquares <- function(x)
{
n <- nrow(bc.dat)
sum((bc.dat[,10] - cbind(1, bc.dat[,1:9]) %*% x)^2) / n
}
bob<-cbind(1, bc.dat[,1:9])
cbind(1, bc.dat[,1:9])%*% c(1,2,3,4,5,6,7,8,9,10)
bob %*% c(1:10)
bob %*% t(c(1:10))
as.matrix(bob) %*% c(1:10)
ssquares <- function(x)
{
n <- nrow(bc.dat)
sum((bc.dat[,10] - as.matrix(cbind(1, bc.dat[,1:9])) %*% x)^2) / n
}
ssquares(c(1:10))
# define the derivatives
derivative <- function(x)
{
n <- nrow(bc.dat) # 200
derva<- sum(-2*(bc.dat[,10] - as.matrix(cbind(1, bc.dat[,1:9])) %*% x))
for (i in 1:10){
derva <- cbind(derva, sum(-2*(bc.dat[,i])*(bc.dat[,10] - as.matrix(cbind(1, bc.dat[,1:9])) %*% x)))
}
}
dx2x <- deriv(~ x^2, "x")
dx2x
dx2x <- deriv(~ x2^2, "x2")
dx2x
dx2x <- deriv(~ (x2+x1)^2, "x1,x2")
dx2x
dx2x <- deriv(~ (x2+x1)^2, "x1","x2")
dx2x
