load("C:/Main/Machine_Learning_Hobby/Home_Edition/Student_Grades/data/dataMain.RData")
load("C:/Main/Machine_Learning_Hobby/Home_Edition/Student_Grades/Cleaning/gradeData.RData")
rm(dataMain)
rm(gradeData)
ssh -T git@github.com
library(knitr)
library(rmarkdown)
?recommenderlab
library(recommenderlab)
install.packages("recommenderlab")
require(swirl)
swirl()
?InstallCourses
install_course("Getting_and_Cleaning_Data")
install_course("Exploratory_Data_Analysis")
swirl()
info()
play()
?select
?filter
nxt()
library(dplyr)
play()
?filter
nxt()
?tbl_df
tbl_df('data frame tbl')
cran <- tbl_df(mydf)
rm("mydf")
cran
?group_by()
?group_by
summary(cran)
by_package <- arrange(cran, package)
by_package <- group_by(cran, package)
by_package
summarize(by_package, mean(size))
?n
?n_distinct
?n
submit()\
submit()
submit()
submit()
submit()
reset()
swirl()
reset()
swirl()
submit()
tbl(pack_sum)
pack_sum
quantile(pack_sum$count, probs = 0.99)
filter(pack_sum, count > 679)
top_counts <- filter(pack_sum, count > 679)
top_counts
View(top_counts)
top_counts_sorted <- arrange(top_counts, count,order = "descending")
?arrange
top_counts_sorted <- arrange(top_counts, desc(count))
View(top_counts_sorted)
quantile(pack_sum$unique, probs = 0.99)
filter(pack_sum, unique > 465)
top_unique <- filter(pack_sum, unique > 465)
View(top_unique)
top_unique_sorted <- arrange(top_unique, desc(unique()))
top_unique_sorted <- arrange(top_unique, desc(unique)
)
View(top_unique_sorted)
submit()
sumbit()
submit()
submit()
View(result3)
submit()
?select
submit()
submit()
submit()
submit()
swirl()
require(swirl)
swirl()
read.csv(path2csv, stringsAsFactors = FALSE)
mydf<-read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
mydf
cran
select(cran, -time)
-5:20
-5:-20
-(5:20)
select(cran, -(X:size))
filter(cran,package == "swirl")
filter(cran, r_version == "3.1.1", | country == "US")
filter(cran, r_version == "3.1.1", country == "US")
?comparison
?Comparison
filter(cran, r_version <= "3.1.1", country == "IN")
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, r_version <= "3.0.2", , country == "US", country == "IN")
filter(cran, r_version <= "3.0.2", , country == "US" | country == "IN")
filter(cran, r_version <= "3.0.2",  country == "US" | country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500)
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, is.na(r_version))
filter(cran, !is.na(r_version))
cran2 <- select(cran, size:ip_id)
arrange(cran2,ip_id)
arrange(cran2,desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, asce(country), desc(r_version),asce(ip_id))
arrange(cran2, country, desc(r_version),ip_id)
cran3<- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_gb = size_mb / 2^20)
mutate(cran3, size_gb = (size_mb = size/ 2^20) / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size *1000)
mutate(cran3, correct_size = size +1000)
summarize(cran, avg_bytes = mean(size)
)
require(swirl)
swirl()
mpg
str(mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, mpg)
gplot(displ, hwy, mpg)
ggplot(displ, hwy, mpg)
qplot(mpg,displ, hwy)
qplot(displ, hwy, mpg)
?qplot
qplot(displ, hwy, data =mpg)
qplot(displ, hwy, data =mpg, aesthetic = drv)
qplot(displ, hwy, data =mpg, color = drv)
qplot(displ, hwy, data =mpg, color = drv, geom = c("point","smooth"))
qplot(hwy, mpg,drv)
qplot(hwy, mpg,data = drv)
qplot(hwy, data =mpg, drv)
qplot(y=hwy, data =mpg, color = drv)
str(myhigh)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = ~ drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
e
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
setwd("C:/Main/AQM/Assignments/Challenge1")
require(plyr)
require(dplyr)
require(gapminder)
require(ggplot2)
load("plotDf.RData")
load("kclusterDf.RData")
load("kcsummary.RData")
qplot(year, gdpPercap, data = plotDf, color = as.factor(cluster),geom = c("point","smooth"), main = "GDP per capita vs year by clusters", ylab = "GDP per capita", xlab = "year of occurance")
qplot(year,lifeExp,data = plotDf, color = as.factor(cluster),geom = c("point","smooth"), main = "Life expectancy vs year by clusters", ylab = "Life expectancy (years)",xlab = "year of occurance")
qplot(year, gdpPercap, data = plotDf, color = as.factor(cluster),geom = c("point","smooth"), main = "GDP per capita vs year by clusters", ylab = "GDP per capita", xlab = "year of occurance")
qplot(as.factor(cluster),avg.LE,data = kclusterDf,geom = "boxplot",color = as.factor(cluster), main = "box plot of average life expectancy by clusters", xlab = "clusters", ylab = "average life expectancy")
qplot(year, gdpPercap, data = plotDf, color = as.factor(cluster),geom = c("point","smooth"), main = "GDP per capita vs year by clusters", ylab = "GDP per capita", xlab = "year of occurance")
qplot(year,lifeExp,data = plotDf, color = as.factor(cluster),geom = c("point","smooth"), main = "Life expectancy vs year by clusters", ylab = "Life expectancy (years)",xlab = "year of occurance")
qplot(as.factor(cluster),avg.LE,data = kclusterDf,geom = "boxplot",color = as.factor(cluster), main = "box plot of average life expectancy by clusters", xlab = "clusters", ylab = "average life expectancy")
